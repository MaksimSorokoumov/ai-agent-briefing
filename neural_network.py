from typing import Dict, List, Any, Optional
from ai_client import AIClient
from competency_analyzer import CompetencyAnalyzer
from question_generator import QuestionGenerator
from question_validator import QuestionValidator
from idea_processor import IdeaProcessor
from models import (
    Question, CompetencyProfile, DomainAnalysis, 
    RequiredCompetencies, SessionData
)
from config import GENERATION


class NeuralNetwork:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    """
    
    def __init__(self, base_url: str = None):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.ai_client = AIClient(base_url)
        self.competency_analyzer = CompetencyAnalyzer(self.ai_client)
        self.question_generator = QuestionGenerator(self.ai_client)
        self.question_validator = QuestionValidator()
        self.idea_processor = IdeaProcessor(self.ai_client)
        
        print("ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")

    # === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===
    
    def analyze_user_request_and_generate_competency_assessment(self, user_idea: str) -> Dict[str, Any]:
        """
        –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
        
        –≠—Ç–∞–ø—ã:
        1. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã
        3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        
        # –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        context_questions = self.competency_analyzer.generate_context_questions(user_idea)
        
        # –≠—Ç–∞–ø 2: –ê–Ω–∞–ª–∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
        required_competencies = self.competency_analyzer.analyze_required_competencies(
            user_idea, context_questions
        )
        
        if not required_competencies:
            # Fallback –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è
            required_competencies = RequiredCompetencies(
                domain="–û–±—â–∞—è",
                competencies=["–ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è"],
                knowledge=["–û–±—â–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"],
                skills=["–ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏"],
                experience=["–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç"]
            )
        
        # –≠—Ç–∞–ø 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
        competency_assessment_questions = self.competency_analyzer.generate_competency_assessment_questions(
            user_idea, required_competencies
        )
        
        return {
            'stage': 'competency_assessment',
            'user_request': user_idea,
            'context_questions': context_questions,
            'required_competencies': required_competencies,
            'competency_questions': competency_assessment_questions,
            'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: "{user_idea}"\n\n–ß—Ç–æ–±—ã –¥–∞—Ç—å –≤–∞–º –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–º–æ—â—å, –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:'
        }

    def build_competency_profile_and_generate_questions(self, user_idea: str, 
                                                      competency_answers: Dict[str, str],
                                                      required_competencies: RequiredCompetencies,
                                                      context_questions: List[str],
                                                      existing_questions: List[str] = None) -> Dict[str, Any]:
        """
        –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        """
        
        # –°—Ç—Ä–æ–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
        competency_profile = self.competency_analyzer.build_competency_profile(
            competency_answers, required_competencies
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö
        all_existing_questions = existing_questions.copy() if existing_questions else []
        if competency_answers:
            all_existing_questions.extend(list(competency_answers.keys()))
        
        adaptive_questions = self.question_generator.generate_adaptive_questions(
            user_idea, competency_profile, context_questions, all_existing_questions
        )
        
        return {
            'stage': 'main_briefing',
            'user_request': user_idea,
            'competency_profile': competency_profile,
            'required_competencies': required_competencies,
            'questions': adaptive_questions,
            'message': f"–û—Ç–ª–∏—á–Ω–æ! –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —è –ø–æ–Ω—è–ª –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ '{competency_profile.domain}'. –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –æ–±—Å—É–∂–¥–µ–Ω–∏—é –≤–∞—à–µ–π –∏–¥–µ–∏:"
        }

    def generate_refined_idea(self, user_idea: str, answers: Dict[str, str], 
                            comments: Dict[str, str] = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç–æ—á–Ω–µ–Ω–Ω–æ–π –∏–¥–µ–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        return self.idea_processor.generate_refined_idea(user_idea, answers, comments)

    def process_feedback_and_regenerate(self, user_idea: str, current_refined_idea: str, 
                                      feedback_type: str, comments: str = "") -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–∏"""
        return self.idea_processor.process_feedback_and_regenerate(
            user_idea, current_refined_idea, feedback_type, comments
        )

    def generate_final_result(self, user_idea: str, refined_idea: str, 
                            all_iterations: List[Dict], iteration_count: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–∏—Ñ–∏–Ω–≥–∞"""
        return self.idea_processor.generate_final_result(
            user_idea, refined_idea, all_iterations, iteration_count
        )

    def reformulate_unclear_questions(self, user_idea: str, unclear_questions: List[Dict], 
                                    user_profile: Dict[str, str]) -> List[Dict[str, Any]]:
        """–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ—Ñ–∏–ª—è –≤ –Ω–æ–≤—ã–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        from config import CompetencyLevel
        
        try:
            overall_level = CompetencyLevel(user_profile.get('domain_expertise', '–±–∞–∑–æ–≤—ã–π'))
        except ValueError:
            overall_level = CompetencyLevel.BASIC
        
        competency_profile = CompetencyProfile(
            domain=user_profile.get('domain', '–û–±—â–∞—è'),
            overall_level=overall_level,
            question_strategy=user_profile
        )
        
        return self.question_generator.reformulate_unclear_questions(
            user_idea, unclear_questions, competency_profile
        )

    # === –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===
    
    def generate_clarifying_questions(self, user_idea: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        questions = self.question_generator.generate_clarifying_questions(user_idea, [])
        return [q.text for q in questions]

    def generate_adaptive_questions(self, user_idea: str, user_profile: Dict[str, str], 
                                  domain_analysis: Dict[str, Any] = None) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ –Ω–æ–≤—ã–π
        from config import CompetencyLevel
        
        try:
            overall_level = CompetencyLevel(user_profile.get('domain_expertise', '–±–∞–∑–æ–≤—ã–π'))
        except ValueError:
            overall_level = CompetencyLevel.BASIC
        
        competency_profile = CompetencyProfile(
            domain=user_profile.get('domain', '–û–±—â–∞—è'),
            overall_level=overall_level,
            question_strategy=user_profile
        )
        
        context_questions = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        existing_questions = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        
        questions = self.question_generator.generate_adaptive_questions(
            user_idea, competency_profile, context_questions, existing_questions
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
        return [
            {
                'question': q.text,
                'explanation': q.explanation,
                'examples': q.examples,
                'adapted_for': q.adapted_for
            }
            for q in questions
        ]

    # === –£–°–¢–ê–†–ï–í–®–ò–ï –ú–ï–¢–û–î–´ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ===
    
    def determine_user_competency_profile(self, user_idea: str) -> Dict[str, Any]:
        """–£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ analyze_user_request_and_generate_competency_assessment"""
        
        domain_analysis = self.competency_analyzer.analyze_idea_domain(user_idea)
        competency_questions = self.competency_analyzer.generate_competency_assessment_questions(
            user_idea, RequiredCompetencies(domain=domain_analysis.primary_domain)
        )
        
        return {
            'domain_analysis': domain_analysis,
            'competency_questions': competency_questions,
            'status': 'awaiting_competency_assessment'
        }

    def build_user_profile_from_competency(self, competency_answers: Dict[str, str], 
                                         domain_analysis: Dict[str, Any]) -> Dict[str, str]:
        """–£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ build_competency_profile"""
        
        required_competencies = RequiredCompetencies(
            domain=domain_analysis.get('primary_domain', '–û–±—â–∞—è')
        )
        
        profile = self.competency_analyzer.build_competency_profile(
            competency_answers, required_competencies
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
        return {
            'domain_expertise': profile.overall_level.value,
            'theoretical_knowledge': profile.theoretical_knowledge,
            'practical_experience': profile.practical_experience,
            'terminology_familiarity': profile.technical_skills,
            'question_complexity': profile.question_strategy.get('complexity_level', '—Å—Ä–µ–¥–Ω–∏–µ'),
            'explanation_needed': profile.question_strategy.get('explanation_needed', True),
            'examples_needed': profile.question_strategy.get('examples_needed', True),
            'profile_summary': profile.profile_summary
        }

    def generate_questions_with_competency_analysis(self, user_idea: str) -> Dict[str, Any]:
        """–£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ analyze_user_request_and_generate_competency_assessment"""
        return self.analyze_user_request_and_generate_competency_assessment(user_idea)

    def process_competency_answers_and_generate_questions(self, user_idea: str, 
                                                        competency_answers: Dict[str, str],
                                                        domain_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–£–°–¢–ê–†–ï–í–®–ò–ô –ú–ï–¢–û–î - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ build_competency_profile_and_generate_questions"""
        
        required_competencies = RequiredCompetencies(
            domain=domain_analysis.get('primary_domain', '–û–±—â–∞—è')
        )
        
        return self.build_competency_profile_and_generate_questions(
            user_idea, competency_answers, required_competencies, []
        )

    # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    
    def check_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LM Studio"""
        return self.ai_client.check_connection()

    def analyze_idea_complexity(self, user_idea: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–¥–µ–∏"""
        return self.idea_processor.analyze_idea_complexity(user_idea)

    def suggest_improvements(self, refined_idea: str) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è –∏–¥–µ–∏"""
        return self.idea_processor.suggest_improvements(refined_idea)

    def validate_question(self, question: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—É—é —Ñ–æ—Ä–º—É"""
        return self.question_validator.is_closed_form_question(question)

    def get_validation_errors(self, question: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞"""
        return self.question_validator.get_validation_errors(question)

    # === –í–ù–£–¢–†–ï–ù–ù–ò–ï –ú–ï–¢–û–î–´ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ===
    
    def _make_request(self, prompt: str, max_tokens: int = 8192, temperature: float = 0.7) -> str:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.ai_client.make_request(prompt, None, max_tokens, temperature)

    def _extract_questions(self, response: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.question_validator.extract_questions_from_text(response)

    def _is_closed_form_question(self, question: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ–π —Ñ–æ—Ä–º—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.question_validator.is_closed_form_question(question)

    def _regenerate_question(self, user_idea: str, invalid_question: str) -> str:
        """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        return self.question_generator._regenerate_question(user_idea, invalid_question)