import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import time
from session_manager import SessionManager
from neural_network import NeuralNetwork
from config import SessionStep
from session_monitor import session_monitor
from logger import logger
import requests


class AIBriefingGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("AI-–ê–≥–µ–Ω—Ç –ë—Ä–∏—Ñ–∏–Ω–≥–∞")
        self.root.geometry("1200x800")
        self.root.configure(bg='#f0f0f0')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.session_manager = SessionManager()
        self.neural_network = NeuralNetwork()
        self.current_session_id = None
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        self.update_session_list()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LM Studio
        self.check_lm_studio_status()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏
        self.create_sidebar(main_frame)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.create_main_content(main_frame)
    
    def create_sidebar(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        sidebar_frame = ttk.LabelFrame(parent, text="üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏", padding=10)
        sidebar_frame.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        
        # –°—Ç–∞—Ç—É—Å LM Studio
        self.lm_status_label = ttk.Label(sidebar_frame, text="üî¥ LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        self.lm_status_label.pack(pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        new_session_btn = ttk.Button(
            sidebar_frame, 
            text="‚ûï –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è",
            command=self.create_new_session
        )
        new_session_btn.pack(fill=tk.X, pady=(0, 10))
        
        # –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
        ttk.Label(sidebar_frame, text="üìã –°–µ—Å—Å–∏–∏:").pack(anchor=tk.W)
        
        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π
        sessions_frame = ttk.Frame(sidebar_frame)
        sessions_frame.pack(fill=tk.BOTH, expand=True, pady=(5, 0))
        
        # –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.sessions_listbox = tk.Listbox(sessions_frame, height=15, font=('Arial', 9))
        scrollbar = ttk.Scrollbar(sessions_frame, orient=tk.VERTICAL, command=self.sessions_listbox.yview)
        self.sessions_listbox.configure(yscrollcommand=scrollbar.set)
        
        self.sessions_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π
        def _on_mousewheel_sessions(event):
            self.sessions_listbox.yview_scroll(int(-1*(event.delta/120)), "units")
        
        self.sessions_listbox.bind("<MouseWheel>", _on_mousewheel_sessions)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.sessions_listbox.bind('<Double-Button-1>', self.load_selected_session)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
        session_buttons_frame = ttk.Frame(sidebar_frame)
        session_buttons_frame.pack(fill=tk.X, pady=(10, 0))
        
        load_btn = ttk.Button(session_buttons_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", command=self.load_selected_session)
        load_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        delete_btn = ttk.Button(session_buttons_frame, text="–£–¥–∞–ª–∏—Ç—å", command=self.delete_selected_session)
        delete_btn.pack(side=tk.LEFT)
    
    def create_main_content(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        self.content_frame = ttk.Frame(parent)
        self.content_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = ttk.Label(
            self.content_frame, 
            text="ü§ñ AI-–ê–≥–µ–Ω—Ç –ë—Ä–∏—Ñ–∏–Ω–≥–∞", 
            font=('Arial', 16, 'bold')
        )
        self.title_label.pack(pady=(0, 20))
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_frame = ttk.Frame(self.content_frame)
        self.progress_frame.pack(fill=tk.X, pady=(0, 20))
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.main_content_frame = ttk.Frame(self.content_frame)
        self.main_content_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
        self.show_welcome_screen()
    
    def show_welcome_screen(self):
        """–ü–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        self.clear_main_content()
        
        welcome_frame = ttk.Frame(self.main_content_frame)
        welcome_frame.pack(expand=True)
        
        ttk.Label(
            welcome_frame, 
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–ê–≥–µ–Ω—Ç –ë—Ä–∏—Ñ–∏–Ω–≥–∞!", 
            font=('Arial', 14, 'bold')
        ).pack(pady=20)
        
        ttk.Label(
            welcome_frame,
            text="–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞",
            font=('Arial', 10)
        ).pack()
    
    def clear_main_content(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        for widget in self.main_content_frame.winfo_children():
            widget.destroy()
    
    def create_new_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            session_id = self.session_manager.create_session()
            self.current_session_id = session_id
            self.update_session_list()
            self.show_input_idea_step()
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session_id}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
    
    def update_session_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π"""
        try:
            sessions = self.session_manager.get_all_sessions()
            self.sessions_listbox.delete(0, tk.END)
            
            for session in sessions[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
                status_emoji = "‚úÖ" if session['status'] == 'completed' else "üîÑ"
                display_text = f"{status_emoji} {session['user_idea'][:40]}..."
                self.sessions_listbox.insert(tk.END, display_text)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
            self.session_data = sessions[:20]
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π: {e}")
    
    def load_selected_session(self, event=None):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        selection = self.sessions_listbox.curselection()
        if not selection:
            return
        
        try:
            session_index = selection[0]
            session = self.session_data[session_index]
            self.current_session_id = session['session_id']
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            data = self.session_manager.load_session(self.current_session_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —à–∞–≥
            self.show_current_step(data)
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {self.current_session_id}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
    
    def delete_selected_session(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        selection = self.sessions_listbox.curselection()
        if not selection:
            return
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é?"):
            try:
                session_index = selection[0]
                session = self.session_data[session_index]
                self.session_manager.delete_session(session['session_id'])
                self.update_session_list()
                
                if self.current_session_id == session['session_id']:
                    self.current_session_id = None
                    self.show_welcome_screen()
                
                logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è: {session['session_id']}")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
    
    def show_current_step(self, data):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ —Å–µ—Å—Å–∏–∏"""
        if not data:
            self.show_welcome_screen()
            return
        
        step = data.current_step
        
        if step == SessionStep.INPUT_IDEA:
            self.show_input_idea_step()
        elif step == SessionStep.COMPETENCY_ANALYSIS:
            self.show_competency_analysis_step()
        elif step == SessionStep.GENERATE_QUESTIONS:
            self.show_generate_questions_step()
        elif step == SessionStep.ANSWER_QUESTIONS:
            self.show_answer_questions_step()
        elif step == SessionStep.REFORMULATE_QUESTIONS:
            self.show_reformulate_questions_step()
        elif step == SessionStep.GENERATE_REFINED:
            self.show_generate_refined_step()
        elif step == SessionStep.VALIDATE_IDEA:
            self.show_validate_idea_step()
        elif step == SessionStep.COMPLETED:
            self.show_completed_session()
        else:
            self.show_welcome_screen()
    
    def show_validate_idea_step(self):
        """–®–∞–≥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–¥–µ–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –≠—Ç–æ—Ç —à–∞–≥ –æ–±—ã—á–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
        self.show_completed_session()
    
    def show_input_idea_step(self):
        """–®–∞–≥ –≤–≤–æ–¥–∞ –∏–¥–µ–∏"""
        self.clear_main_content()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ttk.Label(
            self.main_content_frame,
            text="üéØ –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é",
            font=('Arial', 14, 'bold')
        ).pack(pady=(0, 10))
        
        ttk.Label(
            self.main_content_frame,
            text="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π –∏–¥–µ–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏. –ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å –æ –¥–µ—Ç–∞–ª—è—Ö - –º—ã –ø–æ–º–æ–∂–µ–º –∏—Ö –ø—Ä–æ—è—Å–Ω–∏—Ç—å!",
            wraplength=600
        ).pack(pady=(0, 20))
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∏–¥–µ–∏
        self.idea_text = scrolledtext.ScrolledText(
            self.main_content_frame,
            height=8,
            width=80,
            wrap=tk.WORD,
            font=('Arial', 10)
        )
        self.idea_text.pack(pady=(0, 20))
        self.idea_text.insert(tk.END, "–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—á—É —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
        def _on_mousewheel_idea(event):
            self.idea_text.yview_scroll(int(-1*(event.delta/120)), "units")
        
        self.idea_text.bind("<MouseWheel>", _on_mousewheel_idea)
        
        # –û—á–∏—Å—Ç–∫–∞ placeholder –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
        def on_focus_in_idea(event):
            current_text = self.idea_text.get(1.0, tk.END).strip()
            if current_text.startswith("–ù–∞–ø—Ä–∏–º–µ—Ä:"):
                self.idea_text.delete(1.0, tk.END)
        
        def on_focus_out_idea(event):
            current_text = self.idea_text.get(1.0, tk.END).strip()
            if not current_text:
                self.idea_text.insert(tk.END, "–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—á—É —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò...")
        
        self.idea_text.bind("<FocusIn>", on_focus_in_idea)
        self.idea_text.bind("<FocusOut>", on_focus_out_idea)
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –±—Ä–∏—Ñ–∏–Ω–≥–∞
        start_btn = ttk.Button(
            self.main_content_frame,
            text="üöÄ –ù–∞—á–∞—Ç—å –±—Ä–∏—Ñ–∏–Ω–≥",
            command=self.start_briefing
        )
        start_btn.pack()
    
    def start_briefing(self):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±—Ä–∏—Ñ–∏–Ω–≥–∞"""
        idea_text = self.idea_text.get(1.0, tk.END).strip()
        
        if not idea_text or idea_text.startswith("–ù–∞–ø—Ä–∏–º–µ—Ä:") or len(idea_text) < 10:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ")
            return
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ—é
            data = self.session_manager.load_session(self.current_session_id)
            data.user_idea = idea_text
            data.original_user_idea = idea_text
            data.current_step = SessionStep.COMPETENCY_ANALYSIS  # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π!
            data.competency_stage = 'start'
            self.session_manager.save_session(data)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∞–ª–∏–∑—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
            self.show_competency_analysis_step()
            self.update_session_list()
            
            logger.info(f"–ò–¥–µ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {self.current_session_id}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ—é: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–∏: {e}")
    
    def show_competency_analysis_step(self):
        """–®–∞–≥ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.clear_main_content()
        
        ttk.Label(
            self.main_content_frame,
            text="üéì –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π",
            font=('Arial', 14, 'bold')
        ).pack(pady=(0, 20))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_var = tk.DoubleVar()
        progress_bar = ttk.Progressbar(
            self.main_content_frame,
            variable=self.progress_var,
            mode='indeterminate'
        )
        progress_bar.pack(fill=tk.X, pady=(0, 20))
        progress_bar.start()
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(
            self.main_content_frame,
            text="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à—É –∏–¥–µ—é –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏..."
        )
        self.status_label.pack()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self.analyze_competency_async, daemon=True).start()

    def show_generate_questions_step(self):
        """–®–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π)"""
        self.clear_main_content()
        
        ttk.Label(
            self.main_content_frame,
            text="‚ùì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
            font=('Arial', 14, 'bold')
        ).pack(pady=(0, 20))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_var = tk.DoubleVar()
        progress_bar = ttk.Progressbar(
            self.main_content_frame,
            variable=self.progress_var,
            mode='indeterminate'
        )
        progress_bar.pack(fill=tk.X, pady=(0, 20))
        progress_bar.start()
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(
            self.main_content_frame,
            text="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π..."
        )
        self.status_label.pack()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self.generate_adaptive_questions_async, daemon=True).start()
    
    def analyze_competency_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            data = self.session_manager.load_session(self.current_session_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.root.after(0, lambda: self.status_label.config(text="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç—å –∑–Ω–∞–Ω–∏–π..."))
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
            competency_result = self.neural_network.analyze_user_request_and_generate_competency_assessment(data.user_idea)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
            data.context_questions = competency_result['context_questions']
            data.required_competencies = competency_result['required_competencies']
            data.competency_questions = competency_result['competency_questions']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            for question in data.competency_questions:
                if question.text not in data.all_asked_questions:
                    data.all_asked_questions.append(question.text)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–≤–µ—Ç–∞–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö
            if data.competency_questions:
                data.current_step = SessionStep.ANSWER_QUESTIONS
                data.competency_stage = 'assessment'  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —ç—Ç–∞–ø –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
                self.session_manager.save_session(data)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–≤–µ—Ç–∞–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö
                self.root.after(0, self.show_competency_questions_step)
            else:
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö"))
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: {str(e)}"
            logger.error(error_msg)
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("–û—à–∏–±–∫–∞", msg))

    def generate_adaptive_questions_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π)"""
        try:
            data = self.session_manager.load_session(self.current_session_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.root.after(0, lambda: self.status_label.config(text="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã..."))
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            all_existing_questions = data.all_asked_questions.copy()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö
            if data.competency_questions:
                for q in data.competency_questions:
                    if q.text not in all_existing_questions:
                        all_existing_questions.append(q.text)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–≤–µ—Ç—ã –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            adaptive_result = self.neural_network.build_competency_profile_and_generate_questions(
                data.user_idea,
                data.competency_answers,
                data.required_competencies,
                data.context_questions,
                all_existing_questions
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            data.clarifying_questions = adaptive_result['questions']
            data.competency_profile = adaptive_result['competency_profile']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            for question in data.clarifying_questions:
                if question.text not in data.all_asked_questions:
                    data.all_asked_questions.append(question.text)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–≤–µ—Ç–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            if data.clarifying_questions:
                data.current_step = SessionStep.ANSWER_QUESTIONS
                data.competency_stage = 'main'  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —ç—Ç–∞–ø
                self.session_manager.save_session(data)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–≤–µ—Ç–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                self.root.after(0, self.show_main_questions_step)
            else:
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"))
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}"
            logger.error(error_msg)
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("–û—à–∏–±–∫–∞", msg))
    

    
    def show_competency_questions_step(self):
        """–®–∞–≥ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö"""
        self.clear_main_content()
        
        data = self.session_manager.load_session(self.current_session_id)
        questions = [q.text for q in data.competency_questions] if data and data.competency_questions else []
        
        ttk.Label(
            self.main_content_frame,
            text="üéì –û—Ü–µ–Ω–∫–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π",
            font=('Arial', 14, 'bold')
        ).pack(pady=(0, 10))
        
        ttk.Label(
            self.main_content_frame,
            text="–î–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:",
            wraplength=600
        ).pack(pady=(0, 20))
        
        self._show_questions_form(questions, self.submit_competency_answers)

    def show_main_questions_step(self):
        """–®–∞–≥ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π)"""
        self.clear_main_content()
        
        data = self.session_manager.load_session(self.current_session_id)
        questions = [q.text for q in data.clarifying_questions] if data and data.clarifying_questions else []
        
        ttk.Label(
            self.main_content_frame,
            text="‚ùì –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏–¥–µ–∏",
            font=('Arial', 14, 'bold')
        ).pack(pady=(0, 10))
        
        ttk.Label(
            self.main_content_frame,
            text="–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ –æ–±—Å—É–¥–∏–º –≤–∞—à—É –∏–¥–µ—é:",
            wraplength=600
        ).pack(pady=(0, 20))
        
        self._show_questions_form(questions, self.submit_main_answers)

    def show_answer_questions_step(self):
        """–®–∞–≥ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        data = self.session_manager.load_session(self.current_session_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —ç—Ç–∞–ø —Å–µ–π—á–∞—Å
        if hasattr(data, 'competency_stage') and data.competency_stage == 'assessment':
            self.show_competency_questions_step()
        elif hasattr(data, 'competency_stage') and data.competency_stage == 'main':
            self.show_main_questions_step()
        else:
            # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π
            self.show_competency_questions_step()

    def _show_questions_form(self, questions, submit_callback):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        canvas = tk.Canvas(self.main_content_frame)
        scrollbar = ttk.Scrollbar(self.main_content_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        def _bind_to_mousewheel(event):
            canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        def _unbind_from_mousewheel(event):
            canvas.unbind_all("<MouseWheel>")
        
        canvas.bind('<Enter>', _bind_to_mousewheel)
        canvas.bind('<Leave>', _unbind_from_mousewheel)
        
        # –ü–æ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ (—Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
        self.answer_vars = []  # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫
        self.comment_entries = []  # –ü–æ–ª—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        
        for i, question in enumerate(questions):
            # –§—Ä–µ–π–º –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
            q_frame = ttk.LabelFrame(scrollable_frame, text=f"–í–æ–ø—Ä–æ—Å {i+1}", padding=10)
            q_frame.pack(fill=tk.X, pady=(0, 10), padx=10)
            
            # –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–¥–µ–ª–µ–Ω–∏—è)
            question_label = tk.Label(
                q_frame, 
                text=question, 
                wraplength=500,
                justify=tk.LEFT,
                font=('Arial', 12),
                bg='white',
                relief=tk.FLAT,
                padx=5,
                pady=5
            )
            question_label.pack(anchor=tk.W, pady=(0, 15), fill=tk.X)
            
            # –î–µ–ª–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª—è–µ–º—ã–º
            question_label.bind("<Button-1>", lambda e: e.widget.focus_set())
            question_label.bind("<Control-a>", lambda e: e.widget.selection_range(0, tk.END))
            
            # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
            answer_var = tk.StringVar(value="")
            self.answer_vars.append(answer_var)
            
            options_frame = ttk.Frame(q_frame)
            options_frame.pack(fill=tk.X, pady=(0, 10))
            
            # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –±–µ–∑ –∏–∫–æ–Ω–æ–∫
            ttk.Radiobutton(
                options_frame, 
                text="–î–∞", 
                variable=answer_var, 
                value="–î–∞"
            ).pack(side=tk.LEFT, padx=(0, 20))
            
            ttk.Radiobutton(
                options_frame, 
                text="–ù–µ—Ç", 
                variable=answer_var, 
                value="–ù–µ—Ç"
            ).pack(side=tk.LEFT, padx=(0, 20))
            
            ttk.Radiobutton(
                options_frame, 
                text="–î–æ–≤–µ—Ä—è—é —Ä–µ—à–µ–Ω–∏–µ –ò–ò", 
                variable=answer_var, 
                value="–î–æ–≤–µ—Ä—è—é —Ä–µ—à–µ–Ω–∏–µ –ò–ò"
            ).pack(side=tk.LEFT)
            
            # –ü–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            comment_entry = scrolledtext.ScrolledText(
                q_frame, 
                height=2, 
                width=60,
                wrap=tk.WORD,
                font=('Arial', 9)
            )
            comment_entry.pack(fill=tk.X, pady=(10, 0))
            comment_entry.insert(tk.END, "–ú–µ—Å—Ç–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
            comment_entry.config(fg='#888888')  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç
            
            # –û—á–∏—Å—Ç–∫–∞ placeholder –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
            def on_focus_in(event, entry=comment_entry):
                if entry.get(1.0, tk.END).strip() == "–ú–µ—Å—Ç–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)":
                    entry.delete(1.0, tk.END)
                    entry.config(fg='black')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç
            
            def on_focus_out(event, entry=comment_entry):
                if not entry.get(1.0, tk.END).strip():
                    entry.insert(tk.END, "–ú–µ—Å—Ç–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
                    entry.config(fg='#888888')  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç
            
            comment_entry.bind("<FocusIn>", on_focus_in)
            comment_entry.bind("<FocusOut>", on_focus_out)
            
            self.comment_entries.append(comment_entry)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Å–∞–º–æ–º –Ω–∏–∑—É
        submit_btn = ttk.Button(
            scrollable_frame,
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã",
            command=submit_callback
        )
        submit_btn.pack(pady=(20, 10))
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

    def submit_competency_answers(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö"""
        # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏–∑ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫
        radio_answers = []
        for var in self.answer_vars:
            radio_answers.append(var.get())
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments = []
        for entry in self.comment_entries:
            comment = entry.get(1.0, tk.END).strip()
            if comment == "–ú–µ—Å—Ç–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)":
                comment = ""
            comments.append(comment)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç
        if not any(radio_answers):
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å")
            return
        
        try:
            data = self.session_manager.load_session(self.current_session_id)
            questions = [q.text for q in data.competency_questions] if data.competency_questions else []
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö —Å —É—á–µ—Ç–æ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            answers_dict = {}
            comments_dict = {}
            
            for i, question in enumerate(questions):
                if i < len(radio_answers) and radio_answers[i]:
                    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î–æ–≤–µ—Ä—è—é —Ä–µ—à–µ–Ω–∏–µ –ò–ò", –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ò–ò
                    if radio_answers[i] == "–î–æ–≤–µ—Ä—è—é —Ä–µ—à–µ–Ω–∏–µ –ò–ò":
                        ai_answer = self._generate_ai_answer_for_competency(question, data.user_idea)
                        answers_dict[question] = ai_answer
                    else:
                        answers_dict[question] = radio_answers[i]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
                    if i < len(comments) and comments[i]:
                        comments_dict[question] = comments[i]
            
            data.competency_answers = answers_dict
            if comments_dict:
                if not hasattr(data, 'competency_comments'):
                    data.competency_comments = {}
                data.competency_comments.update(comments_dict)
            
            data.current_step = SessionStep.GENERATE_QUESTIONS
            data.competency_stage = 'profile_built'
            self.session_manager.save_session(data)
            
            self.show_generate_questions_step()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö: {e}")

    def submit_main_answers(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã"""
        # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∏–∑ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫
        radio_answers = []
        for var in self.answer_vars:
            radio_answers.append(var.get())
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments = []
        for entry in self.comment_entries:
            comment = entry.get(1.0, tk.END).strip()
            if comment == "–ú–µ—Å—Ç–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)":
                comment = ""
            comments.append(comment)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç
        if not any(radio_answers):
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å")
            return
        
        try:
            data = self.session_manager.load_session(self.current_session_id)
            questions = [q.text for q in data.clarifying_questions] if data.clarifying_questions else []
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å —É—á–µ—Ç–æ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            answers_dict = {}
            comments_dict = {}
            
            for i, question in enumerate(questions):
                if i < len(radio_answers) and radio_answers[i]:
                    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î–æ–≤–µ—Ä—è—é —Ä–µ—à–µ–Ω–∏–µ –ò–ò", –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ –ò–ò
                    if radio_answers[i] == "–î–æ–≤–µ—Ä—è—é —Ä–µ—à–µ–Ω–∏–µ –ò–ò":
                        ai_answer = self._generate_ai_answer_for_main_question(question, data.user_idea, data.competency_profile)
                        answers_dict[question] = ai_answer
                    else:
                        answers_dict[question] = radio_answers[i]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
                    if i < len(comments) and comments[i]:
                        comments_dict[question] = comments[i]
            
            data.main_answers = answers_dict
            if comments_dict:
                if not hasattr(data, 'main_comments'):
                    data.main_comments = {}
                data.main_comments.update(comments_dict)
            
            data.current_step = SessionStep.REFORMULATE_QUESTIONS
            self.session_manager.save_session(data)
            
            self.show_reformulate_questions_step()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {e}")
    
    def _generate_ai_answer_for_competency(self, question: str, user_idea: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö"""
        try:
            prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–ª —Å–≤–æ—é –∏–¥–µ—é: "{user_idea}"

–í–æ–ø—Ä–æ—Å –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö: "{question}"

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–î–æ–≤–µ—Ä—è—é —Ä–µ—à–µ–Ω–∏–µ –ò–ò", —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤ –µ–≥–æ –ª—É—á—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –µ–≥–æ –∏–¥–µ–µ.

–û—Ç–≤–µ—Ç—å "–î–∞" –∏–ª–∏ "–ù–µ—Ç" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç –ª—É—á—à–µ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –µ–≥–æ –∏–¥–µ–∏. –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≤—ã–±–æ—Ä–∞.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: "–î–∞/–ù–µ—Ç - [–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ]"
"""
            
            response = self.neural_network._make_request(prompt, max_tokens=200, temperature=0.3)
            return response.strip() if response else "–î–∞ - –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: {e}")
            return "–î–∞ - –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
    
    def _generate_ai_answer_for_main_question(self, question: str, user_idea: str, competency_profile) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        try:
            profile_info = ""
            if competency_profile:
                profile_info = f"–£—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {competency_profile.overall_level.value if hasattr(competency_profile.overall_level, 'value') else competency_profile.overall_level}"
            
            prompt = f"""
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å–∞–ª —Å–≤–æ—é –∏–¥–µ—é: "{user_idea}"
{profile_info}

–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å: "{question}"

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–î–æ–≤–µ—Ä—è—é —Ä–µ—à–µ–Ω–∏–µ –ò–ò", —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤ –µ–≥–æ –ª—É—á—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö, —É—á–∏—Ç—ã–≤–∞—è –µ–≥–æ –∏–¥–µ—é –∏ —É—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π.

–û—Ç–≤–µ—Ç—å "–î–∞" –∏–ª–∏ "–ù–µ—Ç" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç –ª—É—á—à–µ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –µ–≥–æ –∏–¥–µ–∏. –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≤—ã–±–æ—Ä–∞.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: "–î–∞/–ù–µ—Ç - [–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ]"
"""
            
            response = self.neural_network._make_request(prompt, max_tokens=300, temperature=0.3)
            return response.strip() if response else "–î–∞ - –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return "–î–∞ - –ò–ò —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"
    
    def show_reformulate_questions_step(self):
        """–®–∞–≥ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        self.clear_main_content()
        
        ttk.Label(
            self.main_content_frame,
            text="üîß –£—Ç–æ—á–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞",
            font=('Arial', 14, 'bold')
        ).pack(pady=(0, 20))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = ttk.Progressbar(self.main_content_frame, mode='indeterminate')
        progress_bar.pack(fill=tk.X, pady=(0, 20))
        progress_bar.start()
        
        self.status_label = ttk.Label(
            self.main_content_frame,
            text="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ —É—Ç–æ—á–Ω—è–µ–º –∏–¥–µ—é..."
        )
        self.status_label.pack()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self.process_answers_async, daemon=True).start()
    
    def process_answers_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
        try:
            data = self.session_manager.load_session(self.current_session_id)
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
            all_answers = {}
            all_comments = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö
            if hasattr(data, 'competency_answers') and data.competency_answers:
                all_answers.update(data.competency_answers)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è—Ö
            if hasattr(data, 'competency_comments') and data.competency_comments:
                all_comments.update(data.competency_comments)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            if hasattr(data, 'main_answers') and data.main_answers:
                all_answers.update(data.main_answers)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            if hasattr(data, 'main_comments') and data.main_comments:
                all_comments.update(data.main_comments)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
            if hasattr(data, 'all_iterations') and data.all_iterations:
                for iteration in data.all_iterations:
                    if hasattr(iteration, 'answers'):
                        for answer in iteration.answers:
                            all_answers[answer.question] = answer.answer
                            if answer.comment:
                                all_comments[answer.question] = answer.comment
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
            refined_idea = self.neural_network.generate_refined_idea(
                data.user_idea, 
                all_answers,
                all_comments
            )
            
            if refined_idea:
                data.refined_idea = refined_idea
                data.current_step = SessionStep.GENERATE_REFINED
                self.session_manager.save_session(data)
                
                self.root.after(0, self.show_generate_refined_step)
            else:
                self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç—ã"))
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤: {str(e)}"
            logger.error(error_msg)
            self.root.after(0, lambda msg=error_msg: messagebox.showerror("–û—à–∏–±–∫–∞", msg))
    
    def show_generate_refined_step(self):
        """–ü–æ–∫–∞–∑ —É—Ç–æ—á–Ω–µ–Ω–Ω–æ–π –∏–¥–µ–∏"""
        self.clear_main_content()
        
        data = self.session_manager.load_session(self.current_session_id)
        
        ttk.Label(
            self.main_content_frame,
            text="‚ú® –£—Ç–æ—á–Ω–µ–Ω–Ω–∞—è –∏–¥–µ—è",
            font=('Arial', 14, 'bold')
        ).pack(pady=(0, 20))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–Ω—É—é –∏–¥–µ—é
        refined_text = scrolledtext.ScrolledText(
            self.main_content_frame,
            height=15,
            width=80,
            wrap=tk.WORD,
            font=('Arial', 10)
        )
        refined_text.pack(pady=(0, 20))
        refined_text.insert(tk.END, data.refined_idea if data else "")
        refined_text.config(state=tk.DISABLED)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
        def _on_mousewheel_refined(event):
            refined_text.yview_scroll(int(-1*(event.delta/120)), "units")
        
        refined_text.bind("<MouseWheel>", _on_mousewheel_refined)
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–∞–∂–µ –≤ disabled —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        refined_text.bind("<Button-1>", lambda e: refined_text.focus_set())
        refined_text.bind("<Control-a>", lambda e: refined_text.tag_add(tk.SEL, "1.0", tk.END))
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_frame = ttk.Frame(self.main_content_frame)
        buttons_frame.pack()
        
        approve_btn = ttk.Button(
            buttons_frame,
            text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
            command=self.approve_refined_idea
        )
        approve_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        iterate_btn = ttk.Button(
            buttons_frame,
            text="üîÑ –£—Ç–æ—á–Ω–∏—Ç—å –µ—â–µ",
            command=self.iterate_again
        )
        iterate_btn.pack(side=tk.LEFT)
    
    def approve_refined_idea(self):
        """–ü—Ä–∏–Ω—è—Ç–∏–µ —É—Ç–æ—á–Ω–µ–Ω–Ω–æ–π –∏–¥–µ–∏"""
        try:
            data = self.session_manager.load_session(self.current_session_id)
            data.current_step = SessionStep.COMPLETED
            data.status = 'completed'
            self.session_manager.save_session(data)
            
            self.show_completed_session()
            self.update_session_list()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
    
    def iterate_again(self):
        """–ù–æ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è —É—Ç–æ—á–Ω–µ–Ω–∏—è"""
        try:
            data = self.session_manager.load_session(self.current_session_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
            from models import SessionIteration, Answer
            from datetime import datetime
            
            current_iteration = SessionIteration(
                iteration=data.iteration_count,
                timestamp=datetime.now(),
                refined_idea=data.refined_idea,
                feedback_type="iterate_again",
                comments="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é",
                questions=data.clarifying_questions.copy() if data.clarifying_questions else [],
                answers=[]
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ –∏—Ç–µ—Ä–∞—Ü–∏—é
            if hasattr(data, 'main_answers') and data.main_answers:
                for question, answer in data.main_answers.items():
                    comment = ""
                    if hasattr(data, 'main_comments') and data.main_comments and question in data.main_comments:
                        comment = data.main_comments[question]
                    
                    answer_obj = Answer(
                        question=question,
                        answer=answer,
                        comment=comment,
                        timestamp=datetime.now()
                    )
                    current_iteration.answers.append(answer_obj)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
            if not hasattr(data, 'all_iterations'):
                data.all_iterations = []
            data.all_iterations.append(current_iteration)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Ç–µ—Ä–∞—Ü–∏–π
            data.iteration_count += 1
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            data.main_answers = {}
            data.main_comments = {}
            data.clarifying_questions = []
            
            # –ù–ï –æ—á–∏—â–∞–µ–º all_asked_questions - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π)
            data.current_step = SessionStep.GENERATE_QUESTIONS
            data.competency_stage = 'profile_built'  # –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω
            
            self.session_manager.save_session(data)
            self.show_generate_questions_step()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–æ–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏: {e}")
    
    def show_completed_session(self):
        """–ü–æ–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        self.clear_main_content()
        
        data = self.session_manager.load_session(self.current_session_id)
        
        ttk.Label(
            self.main_content_frame,
            text="üéâ –ë—Ä–∏—Ñ–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!",
            font=('Arial', 16, 'bold')
        ).pack(pady=(0, 20))
        
        # –ò—Å—Ö–æ–¥–Ω–∞—è –∏–¥–µ—è
        ttk.Label(
            self.main_content_frame,
            text="üí° –ò—Å—Ö–æ–¥–Ω–∞—è –∏–¥–µ—è:",
            font=('Arial', 12, 'bold')
        ).pack(anchor=tk.W, pady=(0, 5))
        
        original_text = scrolledtext.ScrolledText(
            self.main_content_frame,
            height=5,
            width=80,
            wrap=tk.WORD,
            font=('Arial', 10)
        )
        original_text.pack(pady=(0, 20))
        original_text.insert(tk.END, data.original_user_idea if data else "")
        original_text.config(state=tk.DISABLED)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–π –∏–¥–µ–∏
        def _on_mousewheel_original(event):
            original_text.yview_scroll(int(-1*(event.delta/120)), "units")
        
        original_text.bind("<MouseWheel>", _on_mousewheel_original)
        original_text.bind("<Button-1>", lambda e: original_text.focus_set())
        original_text.bind("<Control-a>", lambda e: original_text.tag_add(tk.SEL, "1.0", tk.END))
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–¥–µ—è
        ttk.Label(
            self.main_content_frame,
            text="‚ú® –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–¥–µ—è:",
            font=('Arial', 12, 'bold')
        ).pack(anchor=tk.W, pady=(0, 5))
        
        final_text = scrolledtext.ScrolledText(
            self.main_content_frame,
            height=10,
            width=80,
            wrap=tk.WORD,
            font=('Arial', 10)
        )
        final_text.pack(pady=(0, 20))
        final_text.insert(tk.END, data.refined_idea if data else "")
        final_text.config(state=tk.DISABLED)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–¥–µ–∏
        def _on_mousewheel_final(event):
            final_text.yview_scroll(int(-1*(event.delta/120)), "units")
        
        final_text.bind("<MouseWheel>", _on_mousewheel_final)
        final_text.bind("<Button-1>", lambda e: final_text.focus_set())
        final_text.bind("<Control-a>", lambda e: final_text.tag_add(tk.SEL, "1.0", tk.END))
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        new_session_btn = ttk.Button(
            self.main_content_frame,
            text="üÜï –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è",
            command=self.create_new_session
        )
        new_session_btn.pack()
    
    def check_lm_studio_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ LM Studio"""
        def check_async():
            try:
                response = requests.get("http://localhost:1234/v1/models", timeout=5)
                if response.status_code == 200:
                    self.root.after(0, lambda: self.lm_status_label.config(
                        text="üü¢ LM Studio –ø–æ–¥–∫–ª—é—á–µ–Ω",
                        foreground="green"
                    ))
                else:
                    self.root.after(0, lambda: self.lm_status_label.config(
                        text="üî¥ LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                        foreground="red"
                    ))
            except:
                self.root.after(0, lambda: self.lm_status_label.config(
                    text="üî¥ LM Studio –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
                    foreground="red"
                ))
        
        threading.Thread(target=check_async, daemon=True).start()
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        self.root.after(30000, self.check_lm_studio_status)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()


if __name__ == "__main__":
    app = AIBriefingGUI()
    app.run() 