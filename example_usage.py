#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
"""

from neural_network import NeuralNetwork

def example_competency_analysis():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º–∏
    """
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    nn = NeuralNetwork()
    
    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_idea = "–•–æ—á—É –ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–æ–≤–æ–µ –±–ª—é–¥–æ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–Ω–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"
    
    print("üîç –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π")
    print(f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_idea}'")
    print()
    
    # –≠—Ç–∞–ø 1: –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    analysis_result = nn.analyze_user_request_and_generate_competency_assessment(user_idea)
    
    print("üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
    for i, question in enumerate(analysis_result['context_questions'], 1):
        print(f"{i}. {question}")
    print()
    
    print("üéØ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:")
    competencies = analysis_result['required_competencies']
    print(f"–û–±–ª–∞—Å—Ç—å: {competencies['domain']}")
    print(f"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏: {', '.join(competencies['competencies'])}")
    print(f"–ó–Ω–∞–Ω–∏—è: {', '.join(competencies['knowledge'])}")
    print(f"–£–º–µ–Ω–∏—è: {', '.join(competencies['skills'])}")
    print(f"–û–ø—ã—Ç: {', '.join(competencies['experience'])}")
    print()
    
    print("‚ùì –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π:")
    for i, q_data in enumerate(analysis_result['competency_questions'], 1):
        print(f"{i}. {q_data['question']} ({q_data['category']})")
    print()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("üîç –≠–¢–ê–ü 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    competency_answers = {
        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –æ–±–ª–∞—Å—Ç–∏ –ö—É–ª–∏–Ω–∞—Ä–∏—è?": "–ù–µ—Ç",
        "–ò–º–µ–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ–ø—ã—Ç –≤ –ö—É–ª–∏–Ω–∞—Ä–∏—è?": "–î–∞", 
        "–£–º–µ–µ—Ç–µ –ª–∏ –≤—ã –≥–æ—Ç–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞?": "–î–∞",
        "–ó–Ω–∞–∫–æ–º—ã –ª–∏ –≤—ã —Å –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ —Å–æ—á–µ—Ç–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤?": "–ù–µ—Ç"
    }
    
    print("–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    for question, answer in competency_answers.items():
        print(f"- {question}: {answer}")
    print()
    
    # –≠—Ç–∞–ø 2: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    final_result = nn.build_competency_profile_and_generate_questions(
        user_idea,
        competency_answers,
        analysis_result['required_competencies'],
        analysis_result['context_questions']
    )
    
    print("üë§ –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    profile = final_result['competency_profile']
    print(f"–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {profile['overall_level']}")
    print(f"–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: {', '.join(profile['strengths'])}")
    print(f"–ü—Ä–æ–±–µ–ª—ã: {', '.join(profile['gaps'])}")
    print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {profile['question_strategy']['complexity_level']} –≤–æ–ø—Ä–æ—Å—ã")
    print()
    
    print("üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –±—Ä–∏—Ñ–∏–Ω–≥–∞:")
    for i, q_data in enumerate(final_result['questions'], 1):
        print(f"{i}. {q_data['question']}")
        if q_data.get('explanation'):
            print(f"   üí° {q_data['explanation']}")
        if q_data.get('examples'):
            print(f"   üìù –ü—Ä–∏–º–µ—Ä—ã: {', '.join(q_data['examples'])}")
        print(f"   üîß {q_data['adapted_for']}")
        print()

if __name__ == "__main__":
    example_competency_analysis() 